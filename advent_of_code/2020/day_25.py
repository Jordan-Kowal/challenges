"""Day 25 challenge"""

# Built-in
from time import perf_counter

# Personal
from _shared import read_input

# --------------------------------------------------------------------------------
# > Helpers
# --------------------------------------------------------------------------------
DIVIDER = 20201227
SUBJECT_NUMBER = 7


def get_loop_size(public_key):
    """
    Gets the loop size related to the subject number 7 and the provided public key
    :param int public_key: A RFID public key
    :return: The number of loop required to obtain the public key with the subject number 7
    :rtype: int
    """
    value = 1
    i = 0
    while True:
        i += 1
        value = value * SUBJECT_NUMBER
        value = value % DIVIDER
        if public_key == value:
            break
    return i


def transform(subject_number, loop_size):
    """
    The number generated by transforming a value with a subject number n times
    :param int subject_number: The number to use in our calculations
    :param int loop_size: Number of times we should transform the value
    :return: The generated value
    :rtype: int
    """
    value = 1
    for i in range(loop_size):
        value = value * subject_number
        value = value % DIVIDER
    return value


# --------------------------------------------------------------------------------
# > Main
# --------------------------------------------------------------------------------
# Initialization
start = perf_counter()
content = read_input("day_25.txt")
CARD_PUBLEY_KEY = int(content[0])
DOOR_PUBLEY_KEY = int(content[1])

# Find the loop sizes
card_loop = get_loop_size(CARD_PUBLEY_KEY)
door_loop = get_loop_size(DOOR_PUBLEY_KEY)
print(f"CARD: {7}, {card_loop}")
print(f"DOOR: {7}, {door_loop}")

# Generate the private key
private_key_1 = transform(CARD_PUBLEY_KEY, door_loop)
private_key_2 = transform(DOOR_PUBLEY_KEY, card_loop)
print(private_key_1)
print(private_key_2)

# Terminate
end = perf_counter()
print(end - start)
